{"name":"Space Invaders 3D","tagline":"Projet de Synthèse d'Images Avancée","body":"Démo : [lien vers olympe.in](http://cfollet.olympe.in/projet_sia/space_invaders_3D.html)\r\n\r\n# Table des matières\r\n- [Les classes](#classes)\r\n- [Les details](#details)\r\n- [Les limites d'implémentation](#limites)\r\n- [Les librairies](#lib)\r\n\r\n\r\n<a name =\"classes\"></a>\r\n# Les classes \r\nFamiliers avec la technologie orientée objet, nous avons décidé d'implémenter des classes en Javascript. Cette technologie est adaptée à ce style d'application, elle permet d'améliorer la lisibilité du code et sa modularité. Nous nous sommes aidés du cours sur le site [Mozilla](https://developer.mozilla.org/fr/docs/Web/JavaScript/Introduction_%C3%A0_JavaScript_orient%C3%A9_objet).  \r\nNous avons, pendant deux semaines, recommencé tout notre projet encore et encore jusqu'à ce que l'organisation du code nous convienne. L'architecture de notre code est un des aspects les plus important que nous avons voulu mener à bien pour que le jeu soit adaptatif et évolutif.\r\n\r\n- La classe *Game* contient l'ensemble du jeu, c'est à dire un *Environment*, le *Level* courant et le *Player*.\r\n\r\n- La classe *Environment* contient : les décors, lumières et particules.\r\n\r\n- La classe *Level* contient : l'armée ennemie et les défenses.\r\n\r\nPour ce qui est des classes décrivant les \"objets\" de notre jeu, à savoir : les invaders, le joueur, les défenses, les balles... Elles héritent de THREE.Group. Nous construisons chaque \"objet\" à l'aide d'une matrice produisant un ensemble de cubes de taille unitaire que nous ajoutons au groupe.  \r\nPar soucis de performance et pour un aspect rétro du jeu, nous avons préféré cette approche au chargement de modèle.  \r\nMais un dessin vaut mieux qu'un long discours : \r\n![Diagramme UML](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/sia%20Class%20diagram.png)\r\n\r\n<a name =\"details\"></a>\r\n# Les details \r\n\r\n## La performance\r\nLa performance dans un jeu est primordiale. Le jeu doit être léger sans être minimaliste. Pour trouver un compromis, nous avons du :  \r\n\r\n1. **Fusionner les objets** (à l'aide de merge) ne nécessitant pas de précision dessus (ie. une défense se détruit petit à petit, elle ne doit donc pas être fusionnée sans quoi elle se comportera comme un bloc et se détruira comme un bloc).\r\n2. A défaut d'avoir eu le temps et la patience de trouver une alternative aux Raycaster. Nous leurs avons donnés un **ensemble de Mesh cibles minimal** (ie. pour le joueur : les seules cibles sont les aliens et les bunkers. Inutile donc de passer scene.children).  \r\nLe jeu tourne en moyenne entre 30 et 60 FPS.\r\n\r\n## Les tirs\r\nUn tir est une action effectuée par un invader ou un joueur. Les particularités et les défis techniques des tirs sont :  \r\n\r\n1. Le tireur peut **tirer plusieurs missiles**. Il suffit de créer un tableau de balles dans la classe du tireur. Ensuite, à lui de les détruire quand il le faut et de les faire avancer.\r\n2. Les **balles sont éclairantes**. Ce défis nous a tracassé car Three.js ne permet pas de créer de façon élégante des lumières pendant l’exécution du renderer (cf [issue](https://github.com/mrdoob/three.js/issues/598)). Il a fallu créer une poignée de lumières sous chaque tireur.  \r\nLorsqu'un missile part une des lumières s'allume et le suit. Elle s’éteint lorsqu'il est détruit.   \r\nL’effet est au rendez-vous même si le WebGLRenderer classique ne supporte que 8 lumières à la fois. Cela a pour effet d'éteindre temporairement certaines lumières de l’environnement (la solution du WebGLDeferredRenderer a été explorée sans succès).\r\n3. La **vitesse des missiles** et la cadence des tirs se gèrent aléatoirement.\r\n\r\n## L'armée\r\nL'**armée ennemie est \"hiérarchisée\"**. Elle contrôle ses bataillons qui contrôlent leurs aliens. Le principal avantage d'avoir une telle organisation est la modularité. On peut créer différents types d'aliens, avec des valeurs de points différents, des mouvements différents, et les incorporer à l'armée dans des bataillons.  \r\nUn mouvement non similaire de chaque bataillon nécessite néamoins de contrôler qu'il n'y ait pas chevauchement si un bataillon va plus vite que son suivant.\r\n\r\n## L'intelligence artificielle\r\n\r\nNous avons simulé une pseudo IA par les points suivants :\r\n\r\n- Les aliens tirent à **intervalles de temps aléatoire**, ils diminuent en fonction de la difficulté.\r\n- Le bataillon sélectionne l'**alien le plus proche** du joueur comme candidat au tir.\r\n\r\n## Le son\r\nL'introduction  du jeu se fait calmement avec une musique originale du film Interstellar : **Stay**.  \r\nNous avons voulu une ambiance  un peu disco, sombre et colorée. Un bon morceau de nos fameux robots Daft Punk : **Veridis Quo**.\r\nNous avons préféré  des musiques complètes à celles des 8bits/game pour souligner les aspects aboutis et soignés de l'interface et du jeu.\r\n\r\n<a name =\"limites\"></a>\r\n# Les limites d'implémentation\r\n\r\n## La gestion des bibliothèques : Require JS\r\nDans cette étape, nous devions constituer des modules à partir des différents fichiers javascript chargés depuis un fichier javascript dit \"main\". Le but était de réduire le nombre d'appels de script afin d'optimiser le chargement dans le fichier principal html.  \r\nArrivés en milieu de projet, nous n'avons donc pas réussi à intégrer ce gestionnaire.\r\n\r\n\r\n<a name =\"lib\"></a>\r\n# Les librairies\r\n\r\n- [Please.js](http://www.checkman.io/please/) : Pour la gestion de couleurs automatiques et aléatoires.\r\n- [Tween.js](https://github.com/tweenjs/tween.js) : Pour des animations fluides et naturelles.\r\n- [Threex.js](http://www.threejsgames.com/extensions/) : Parce que c'est la librairie dédiée au jeu de Three.js.\r\n- [ParticleEngine.js](http://squarefeet.github.io/ShaderParticleEngine/) : Parce que nous sommes dans l'espace, il fallait des  étoiles.\r\n- [Buzz.js](http://buzz.jaysalvat.com/) : Pour gérer la musique et les effets audio.\r\n\r\n# Quelques captures\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_1.png)\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_2.png)\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_3.png)\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_4.png)\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_5.png)\r\n\r\n![Screen](https://raw.githubusercontent.com/NephtysOrg/projet_sia/master/medias/images/screen_6.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}